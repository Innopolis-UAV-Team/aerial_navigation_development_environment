import os

from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument, IncludeLaunchDescription, TimerAction, OpaqueFunction
from launch.launch_description_sources import PythonLaunchDescriptionSource, FrontendLaunchDescriptionSource
from launch_ros.actions import Node
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution

def launch_local_planner_action(context, config, local_planner_launch_arguments):
  config_str = str(config.perform(context))
  start_local_planner = IncludeLaunchDescription(
    FrontendLaunchDescriptionSource(os.path.join(
      get_package_share_directory('local_planner'), 'launch', 'local_planner_' + config_str + '.launch')
    ),
    launch_arguments=local_planner_launch_arguments
  )
  return [start_local_planner]


def generate_launch_description():
  stateEstimationTopic = LaunchConfiguration('stateEstimationTopic')
  depthCloudTopic = LaunchConfiguration('depthCloudTopic')
  depthCloudDelay = LaunchConfiguration('depthCloudDelay')
  depthCamPitchOffset = LaunchConfiguration('depthCamPitchOffset')
  depthCamXOffset = LaunchConfiguration('depthCamXOffset')
  depthCamYOffset = LaunchConfiguration('depthCamYOffset')
  depthCamZOffset = LaunchConfiguration('depthCamZOffset')
  trackingCamBackward = LaunchConfiguration('trackingCamBackward')
  trackingCamXOffset = LaunchConfiguration('trackingCamXOffset')
  trackingCamYOffset = LaunchConfiguration('trackingCamYOffset')
  trackingCamZOffset = LaunchConfiguration('trackingCamZOffset')
  trackingCamScale = LaunchConfiguration('trackingCamScale')
  vehicleX = LaunchConfiguration('vehicleX')
  vehicleY = LaunchConfiguration('vehicleY')
  vehicleZ = LaunchConfiguration('vehicleZ')
  vehicleYaw = LaunchConfiguration('vehicleYaw')
  use_gazebo = LaunchConfiguration('use_gazebo')
  gazebo_gui = LaunchConfiguration('gazebo_gui')
  world_name = LaunchConfiguration('world_name')
  config = LaunchConfiguration('config')
  realtime_factor = LaunchConfiguration('realtime_factor')

  declare_stateEstimationTopic = DeclareLaunchArgument('stateEstimationTopic', default_value='/state_estimation', description='')
  declare_depthCloudTopic = DeclareLaunchArgument('depthCloudTopic', default_value='/rgbd_camera/points', description='')
  declare_depthCloudDelay = DeclareLaunchArgument('depthCloudDelay', default_value='0.0', description='')
  declare_depthCamPitchOffset = DeclareLaunchArgument('depthCamPitchOffset', default_value='0.0', description='')
  declare_depthCamXOffset = DeclareLaunchArgument('depthCamXOffset', default_value='0.0', description='')
  declare_depthCamYOffset = DeclareLaunchArgument('depthCamYOffset', default_value='0.0', description='')
  declare_depthCamZOffset = DeclareLaunchArgument('depthCamZOffset', default_value='0.0', description='')
  declare_trackingCamBackward = DeclareLaunchArgument('trackingCamBackward', default_value='false', description='')
  declare_trackingCamXOffset = DeclareLaunchArgument('trackingCamXOffset', default_value='0.0', description='')
  declare_trackingCamYOffset = DeclareLaunchArgument('trackingCamYOffset', default_value='0.0', description='')
  declare_trackingCamZOffset = DeclareLaunchArgument('trackingCamZOffset', default_value='0.0', description='')
  declare_trackingCamScale = DeclareLaunchArgument('trackingCamScale', default_value='1.0', description='')
  declare_vehicleX = DeclareLaunchArgument('vehicleX', default_value='0.0', description='')
  declare_vehicleY = DeclareLaunchArgument('vehicleY', default_value='0.0', description='')
  declare_vehicleZ = DeclareLaunchArgument('vehicleZ', default_value='1.0', description='')
  declare_vehicleYaw = DeclareLaunchArgument('vehicleYaw', default_value='0.0', description='')
  declare_use_gazebo = DeclareLaunchArgument('use_gazebo', default_value='true', description='')
  declare_gazebo_gui = DeclareLaunchArgument('gazebo_gui', default_value='true', description='')
  declare_world_name = DeclareLaunchArgument('world_name', default_value='office', description='')
  declare_config = DeclareLaunchArgument('config', default_value='indoor', description='')
  declare_realtime_factor = DeclareLaunchArgument('realtime_factor', default_value='1.0', description='')

  # start_local_planner = IncludeLaunchDescription(
  #   FrontendLaunchDescriptionSource(os.path.join(
  #     get_package_share_directory('local_planner'), 'launch', 'local_planner.launch')
  #   ),
  #   launch_arguments={
  #     'stateEstimationTopic': stateEstimationTopic,
  #     'depthCloudTopic': depthCloudTopic,
  #     'depthCloudDelay': depthCloudDelay,
  #     'depthCamPitchOffset': depthCamPitchOffset,
  #     'depthCamXOffset': depthCamXOffset,
  #     'depthCamYOffset': depthCamYOffset,
  #     'depthCamZOffset': depthCamZOffset,
  #     'trackingCamBackward': trackingCamBackward,
  #     'trackingCamXOffset': trackingCamXOffset,
  #     'trackingCamYOffset': trackingCamYOffset,
  #     'trackingCamZOffset': trackingCamZOffset,
  #     'trackingCamScale': trackingCamScale,
  #   }.items()
  # )

  start_vehicle_simulator = IncludeLaunchDescription(
    PythonLaunchDescriptionSource(os.path.join(
      get_package_share_directory('vehicle_simulator'), 'launch', 'vehicle_simulator.launch')
    ),
    launch_arguments={
      'sensorPitch': depthCamPitchOffset,
      'vehicleX': vehicleX,
      'vehicleY': vehicleY,
      'vehicleZ': vehicleZ,
      'vehicleYaw': vehicleYaw,
      'use_gazebo': use_gazebo,
      'gui': gazebo_gui,
      'world_name': world_name,
      'realtime_factor': realtime_factor
    }.items()
  )

  start_static_tf_publisher = Node(
    package="tf2_ros",
    executable="static_transform_publisher",
    output="screen" ,
    arguments=["0.0", "0.0", "0.0", "-1.5707963", "0.0", "-1.5707963", "vehicle", "rgbd_camera"]
  )

  rviz_config_file = os.path.join(get_package_share_directory('vehicle_simulator'), 'rviz', 'vehicle_simulator_gazebo.rviz')
  start_rviz = Node(
    package='rviz2',
    executable='rviz2',
    arguments=['-d', rviz_config_file],
    output='screen'
  )

  delayed_start_rviz = TimerAction(
    period=8.0,
    actions=[
      start_rviz
    ]
  )

  ld = LaunchDescription()

  # Add the actions
  ld.add_action(declare_stateEstimationTopic)
  ld.add_action(declare_depthCloudTopic)
  ld.add_action(declare_depthCloudDelay)
  ld.add_action(declare_depthCamPitchOffset)
  ld.add_action(declare_depthCamXOffset)
  ld.add_action(declare_depthCamYOffset)
  ld.add_action(declare_depthCamZOffset)
  ld.add_action(declare_trackingCamBackward)
  ld.add_action(declare_trackingCamXOffset)
  ld.add_action(declare_trackingCamYOffset)
  ld.add_action(declare_trackingCamZOffset)
  ld.add_action(declare_trackingCamScale)
  ld.add_action(declare_vehicleX)
  ld.add_action(declare_vehicleY)
  ld.add_action(declare_vehicleZ)
  ld.add_action(declare_vehicleYaw)
  ld.add_action(declare_use_gazebo)
  ld.add_action(declare_gazebo_gui)
  ld.add_action(declare_world_name)
  ld.add_action(declare_config)
  ld.add_action(declare_realtime_factor)

  # ld.add_action(start_local_planner)
  local_planner_launch_arguments = {
      'stateEstimationTopic': stateEstimationTopic,
      'depthCloudTopic': depthCloudTopic,
      'depthCloudDelay': depthCloudDelay,
      'depthCamPitchOffset': depthCamPitchOffset,
      'depthCamXOffset': depthCamXOffset,
      'depthCamYOffset': depthCamYOffset,
      'depthCamZOffset': depthCamZOffset,
      'trackingCamBackward': trackingCamBackward,
      'trackingCamXOffset': trackingCamXOffset,
      'trackingCamYOffset': trackingCamYOffset,
      'trackingCamZOffset': trackingCamZOffset,
      'trackingCamScale': trackingCamScale,
  }.items()
  ld.add_action(OpaqueFunction(function=launch_local_planner_action, args=[config, local_planner_launch_arguments]))
  ld.add_action(start_vehicle_simulator)
  ld.add_action(start_static_tf_publisher)
  ld.add_action(delayed_start_rviz)

  return ld